// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fnord {
namespace feeds {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Message_2eproto();
void protobuf_AssignDesc_Message_2eproto();
void protobuf_ShutdownFile_Message_2eproto();

class Message;
class MessageList;

// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);

  // required uint64 next_offset = 3;
  inline bool has_next_offset() const;
  inline void clear_next_offset();
  static const int kNextOffsetFieldNumber = 3;
  inline ::google::protobuf::uint64 next_offset() const;
  inline void set_next_offset(::google::protobuf::uint64 value);

  // required string data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint64 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional string host_id = 6;
  inline bool has_host_id() const;
  inline void clear_host_id();
  static const int kHostIdFieldNumber = 6;
  inline const ::std::string& host_id() const;
  inline void set_host_id(const ::std::string& value);
  inline void set_host_id(const char* value);
  inline void set_host_id(const char* value, size_t size);
  inline ::std::string* mutable_host_id();
  inline ::std::string* release_host_id();
  inline void set_allocated_host_id(::std::string* host_id);

  // @@protoc_insertion_point(class_scope:fnord.feeds.Message)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_next_offset();
  inline void clear_has_next_offset();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_host_id();
  inline void clear_has_host_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 next_offset_;
  ::std::string* data_;
  ::google::protobuf::uint64 time_;
  ::std::string* host_id_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class MessageList : public ::google::protobuf::Message {
 public:
  MessageList();
  virtual ~MessageList();

  MessageList(const MessageList& from);

  inline MessageList& operator=(const MessageList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageList& default_instance();

  void Swap(MessageList* other);

  // implements Message ----------------------------------------------

  MessageList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageList& from);
  void MergeFrom(const MessageList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fnord.feeds.Message messages = 1;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 1;
  inline const ::fnord::feeds::Message& messages(int index) const;
  inline ::fnord::feeds::Message* mutable_messages(int index);
  inline ::fnord::feeds::Message* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::fnord::feeds::Message >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::fnord::feeds::Message >*
      mutable_messages();

  // @@protoc_insertion_point(class_scope:fnord.feeds.MessageList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fnord::feeds::Message > messages_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static MessageList* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required uint64 offset = 2;
inline bool Message::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 Message::offset() const {
  // @@protoc_insertion_point(field_get:fnord.feeds.Message.offset)
  return offset_;
}
inline void Message::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:fnord.feeds.Message.offset)
}

// required uint64 next_offset = 3;
inline bool Message::has_next_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_next_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_next_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_next_offset() {
  next_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_next_offset();
}
inline ::google::protobuf::uint64 Message::next_offset() const {
  // @@protoc_insertion_point(field_get:fnord.feeds.Message.next_offset)
  return next_offset_;
}
inline void Message::set_next_offset(::google::protobuf::uint64 value) {
  set_has_next_offset();
  next_offset_ = value;
  // @@protoc_insertion_point(field_set:fnord.feeds.Message.next_offset)
}

// required string data = 4;
inline bool Message::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Message::data() const {
  // @@protoc_insertion_point(field_get:fnord.feeds.Message.data)
  return *data_;
}
inline void Message::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:fnord.feeds.Message.data)
}
inline void Message::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:fnord.feeds.Message.data)
}
inline void Message::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fnord.feeds.Message.data)
}
inline ::std::string* Message::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fnord.feeds.Message.data)
  return data_;
}
inline ::std::string* Message::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fnord.feeds.Message.data)
}

// optional uint64 time = 5;
inline bool Message::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Message::time() const {
  // @@protoc_insertion_point(field_get:fnord.feeds.Message.time)
  return time_;
}
inline void Message::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:fnord.feeds.Message.time)
}

// optional string host_id = 6;
inline bool Message::has_host_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_host_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_host_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_host_id() {
  if (host_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_id_->clear();
  }
  clear_has_host_id();
}
inline const ::std::string& Message::host_id() const {
  // @@protoc_insertion_point(field_get:fnord.feeds.Message.host_id)
  return *host_id_;
}
inline void Message::set_host_id(const ::std::string& value) {
  set_has_host_id();
  if (host_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_id_ = new ::std::string;
  }
  host_id_->assign(value);
  // @@protoc_insertion_point(field_set:fnord.feeds.Message.host_id)
}
inline void Message::set_host_id(const char* value) {
  set_has_host_id();
  if (host_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_id_ = new ::std::string;
  }
  host_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:fnord.feeds.Message.host_id)
}
inline void Message::set_host_id(const char* value, size_t size) {
  set_has_host_id();
  if (host_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_id_ = new ::std::string;
  }
  host_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fnord.feeds.Message.host_id)
}
inline ::std::string* Message::mutable_host_id() {
  set_has_host_id();
  if (host_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fnord.feeds.Message.host_id)
  return host_id_;
}
inline ::std::string* Message::release_host_id() {
  clear_has_host_id();
  if (host_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_id_;
    host_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_host_id(::std::string* host_id) {
  if (host_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_id_;
  }
  if (host_id) {
    set_has_host_id();
    host_id_ = host_id;
  } else {
    clear_has_host_id();
    host_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fnord.feeds.Message.host_id)
}

// -------------------------------------------------------------------

// MessageList

// repeated .fnord.feeds.Message messages = 1;
inline int MessageList::messages_size() const {
  return messages_.size();
}
inline void MessageList::clear_messages() {
  messages_.Clear();
}
inline const ::fnord::feeds::Message& MessageList::messages(int index) const {
  // @@protoc_insertion_point(field_get:fnord.feeds.MessageList.messages)
  return messages_.Get(index);
}
inline ::fnord::feeds::Message* MessageList::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:fnord.feeds.MessageList.messages)
  return messages_.Mutable(index);
}
inline ::fnord::feeds::Message* MessageList::add_messages() {
  // @@protoc_insertion_point(field_add:fnord.feeds.MessageList.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fnord::feeds::Message >&
MessageList::messages() const {
  // @@protoc_insertion_point(field_list:fnord.feeds.MessageList.messages)
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::fnord::feeds::Message >*
MessageList::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:fnord.feeds.MessageList.messages)
  return &messages_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace feeds
}  // namespace fnord

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_2eproto__INCLUDED
