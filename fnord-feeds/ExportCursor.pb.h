// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExportCursor.proto

#ifndef PROTOBUF_ExportCursor_2eproto__INCLUDED
#define PROTOBUF_ExportCursor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "TopicCursor.pb.h"
// @@protoc_insertion_point(includes)

namespace fnord {
namespace feeds {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ExportCursor_2eproto();
void protobuf_AssignDesc_ExportCursor_2eproto();
void protobuf_ShutdownFile_ExportCursor_2eproto();

class ExportCursor;

// ===================================================================

class ExportCursor : public ::google::protobuf::Message {
 public:
  ExportCursor();
  virtual ~ExportCursor();

  ExportCursor(const ExportCursor& from);

  inline ExportCursor& operator=(const ExportCursor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportCursor& default_instance();

  void Swap(ExportCursor* other);

  // implements Message ----------------------------------------------

  ExportCursor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExportCursor& from);
  void MergeFrom(const ExportCursor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .fnord.feeds.TopicCursor topic_cursor = 1;
  inline bool has_topic_cursor() const;
  inline void clear_topic_cursor();
  static const int kTopicCursorFieldNumber = 1;
  inline const ::fnord::feeds::TopicCursor& topic_cursor() const;
  inline ::fnord::feeds::TopicCursor* mutable_topic_cursor();
  inline ::fnord::feeds::TopicCursor* release_topic_cursor();
  inline void set_allocated_topic_cursor(::fnord::feeds::TopicCursor* topic_cursor);

  // required uint32 head_sequence = 2;
  inline bool has_head_sequence() const;
  inline void clear_head_sequence();
  static const int kHeadSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 head_sequence() const;
  inline void set_head_sequence(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fnord.feeds.ExportCursor)
 private:
  inline void set_has_topic_cursor();
  inline void clear_has_topic_cursor();
  inline void set_has_head_sequence();
  inline void clear_has_head_sequence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fnord::feeds::TopicCursor* topic_cursor_;
  ::google::protobuf::uint32 head_sequence_;
  friend void  protobuf_AddDesc_ExportCursor_2eproto();
  friend void protobuf_AssignDesc_ExportCursor_2eproto();
  friend void protobuf_ShutdownFile_ExportCursor_2eproto();

  void InitAsDefaultInstance();
  static ExportCursor* default_instance_;
};
// ===================================================================


// ===================================================================

// ExportCursor

// required .fnord.feeds.TopicCursor topic_cursor = 1;
inline bool ExportCursor::has_topic_cursor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExportCursor::set_has_topic_cursor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExportCursor::clear_has_topic_cursor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExportCursor::clear_topic_cursor() {
  if (topic_cursor_ != NULL) topic_cursor_->::fnord::feeds::TopicCursor::Clear();
  clear_has_topic_cursor();
}
inline const ::fnord::feeds::TopicCursor& ExportCursor::topic_cursor() const {
  // @@protoc_insertion_point(field_get:fnord.feeds.ExportCursor.topic_cursor)
  return topic_cursor_ != NULL ? *topic_cursor_ : *default_instance_->topic_cursor_;
}
inline ::fnord::feeds::TopicCursor* ExportCursor::mutable_topic_cursor() {
  set_has_topic_cursor();
  if (topic_cursor_ == NULL) topic_cursor_ = new ::fnord::feeds::TopicCursor;
  // @@protoc_insertion_point(field_mutable:fnord.feeds.ExportCursor.topic_cursor)
  return topic_cursor_;
}
inline ::fnord::feeds::TopicCursor* ExportCursor::release_topic_cursor() {
  clear_has_topic_cursor();
  ::fnord::feeds::TopicCursor* temp = topic_cursor_;
  topic_cursor_ = NULL;
  return temp;
}
inline void ExportCursor::set_allocated_topic_cursor(::fnord::feeds::TopicCursor* topic_cursor) {
  delete topic_cursor_;
  topic_cursor_ = topic_cursor;
  if (topic_cursor) {
    set_has_topic_cursor();
  } else {
    clear_has_topic_cursor();
  }
  // @@protoc_insertion_point(field_set_allocated:fnord.feeds.ExportCursor.topic_cursor)
}

// required uint32 head_sequence = 2;
inline bool ExportCursor::has_head_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExportCursor::set_has_head_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExportCursor::clear_has_head_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExportCursor::clear_head_sequence() {
  head_sequence_ = 0u;
  clear_has_head_sequence();
}
inline ::google::protobuf::uint32 ExportCursor::head_sequence() const {
  // @@protoc_insertion_point(field_get:fnord.feeds.ExportCursor.head_sequence)
  return head_sequence_;
}
inline void ExportCursor::set_head_sequence(::google::protobuf::uint32 value) {
  set_has_head_sequence();
  head_sequence_ = value;
  // @@protoc_insertion_point(field_set:fnord.feeds.ExportCursor.head_sequence)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace feeds
}  // namespace fnord

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ExportCursor_2eproto__INCLUDED
