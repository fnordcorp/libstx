// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskSpec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TaskSpec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fnord {
namespace dproc {

namespace {

const ::google::protobuf::Descriptor* TaskSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskSpec_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TaskSpec_2eproto() {
  protobuf_AddDesc_TaskSpec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TaskSpec.proto");
  GOOGLE_CHECK(file != NULL);
  TaskSpec_descriptor_ = file->message_type(0);
  static const int TaskSpec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSpec, task_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSpec, params_),
  };
  TaskSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskSpec_descriptor_,
      TaskSpec::default_instance_,
      TaskSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskSpec));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TaskSpec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskSpec_descriptor_, &TaskSpec::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TaskSpec_2eproto() {
  delete TaskSpec::default_instance_;
  delete TaskSpec_reflection_;
}

void protobuf_AddDesc_TaskSpec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016TaskSpec.proto\022\013fnord.dproc\"-\n\010TaskSpe"
    "c\022\021\n\ttask_name\030\001 \002(\t\022\016\n\006params\030\002 \001(\t", 76);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TaskSpec.proto", &protobuf_RegisterTypes);
  TaskSpec::default_instance_ = new TaskSpec();
  TaskSpec::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TaskSpec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TaskSpec_2eproto {
  StaticDescriptorInitializer_TaskSpec_2eproto() {
    protobuf_AddDesc_TaskSpec_2eproto();
  }
} static_descriptor_initializer_TaskSpec_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TaskSpec::kTaskNameFieldNumber;
const int TaskSpec::kParamsFieldNumber;
#endif  // !_MSC_VER

TaskSpec::TaskSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fnord.dproc.TaskSpec)
}

void TaskSpec::InitAsDefaultInstance() {
}

TaskSpec::TaskSpec(const TaskSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fnord.dproc.TaskSpec)
}

void TaskSpec::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskSpec::~TaskSpec() {
  // @@protoc_insertion_point(destructor:fnord.dproc.TaskSpec)
  SharedDtor();
}

void TaskSpec::SharedDtor() {
  if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_name_;
  }
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete params_;
  }
  if (this != default_instance_) {
  }
}

void TaskSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskSpec_descriptor_;
}

const TaskSpec& TaskSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskSpec_2eproto();
  return *default_instance_;
}

TaskSpec* TaskSpec::default_instance_ = NULL;

TaskSpec* TaskSpec::New() const {
  return new TaskSpec;
}

void TaskSpec::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_task_name()) {
      if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_name_->clear();
      }
    }
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        params_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fnord.dproc.TaskSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string task_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_name().data(), this->task_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // optional string params = 2;
      case 2: {
        if (tag == 18) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params().data(), this->params().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fnord.dproc.TaskSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fnord.dproc.TaskSpec)
  return false;
#undef DO_
}

void TaskSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fnord.dproc.TaskSpec)
  // required string task_name = 1;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->task_name(), output);
  }

  // optional string params = 2;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fnord.dproc.TaskSpec)
}

::google::protobuf::uint8* TaskSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fnord.dproc.TaskSpec)
  // required string task_name = 1;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->task_name(), target);
  }

  // optional string params = 2;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fnord.dproc.TaskSpec)
  return target;
}

int TaskSpec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string task_name = 1;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_name());
    }

    // optional string params = 2;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskSpec::MergeFrom(const TaskSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_name()) {
      set_task_name(from.task_name());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskSpec::CopyFrom(const TaskSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskSpec::Swap(TaskSpec* other) {
  if (other != this) {
    std::swap(task_name_, other->task_name_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskSpec_descriptor_;
  metadata.reflection = TaskSpec_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dproc
}  // namespace fnord

// @@protoc_insertion_point(global_scope)
