// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskSpec.proto

#ifndef PROTOBUF_TaskSpec_2eproto__INCLUDED
#define PROTOBUF_TaskSpec_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fnord {
namespace dproc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TaskSpec_2eproto();
void protobuf_AssignDesc_TaskSpec_2eproto();
void protobuf_ShutdownFile_TaskSpec_2eproto();

class TaskSpec;

// ===================================================================

class TaskSpec : public ::google::protobuf::Message {
 public:
  TaskSpec();
  virtual ~TaskSpec();

  TaskSpec(const TaskSpec& from);

  inline TaskSpec& operator=(const TaskSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskSpec& default_instance();

  void Swap(TaskSpec* other);

  // implements Message ----------------------------------------------

  TaskSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskSpec& from);
  void MergeFrom(const TaskSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string task_name = 1;
  inline bool has_task_name() const;
  inline void clear_task_name();
  static const int kTaskNameFieldNumber = 1;
  inline const ::std::string& task_name() const;
  inline void set_task_name(const ::std::string& value);
  inline void set_task_name(const char* value);
  inline void set_task_name(const char* value, size_t size);
  inline ::std::string* mutable_task_name();
  inline ::std::string* release_task_name();
  inline void set_allocated_task_name(::std::string* task_name);

  // optional string params = 2;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 2;
  inline const ::std::string& params() const;
  inline void set_params(const ::std::string& value);
  inline void set_params(const char* value);
  inline void set_params(const char* value, size_t size);
  inline ::std::string* mutable_params();
  inline ::std::string* release_params();
  inline void set_allocated_params(::std::string* params);

  // @@protoc_insertion_point(class_scope:fnord.dproc.TaskSpec)
 private:
  inline void set_has_task_name();
  inline void clear_has_task_name();
  inline void set_has_params();
  inline void clear_has_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* task_name_;
  ::std::string* params_;
  friend void  protobuf_AddDesc_TaskSpec_2eproto();
  friend void protobuf_AssignDesc_TaskSpec_2eproto();
  friend void protobuf_ShutdownFile_TaskSpec_2eproto();

  void InitAsDefaultInstance();
  static TaskSpec* default_instance_;
};
// ===================================================================


// ===================================================================

// TaskSpec

// required string task_name = 1;
inline bool TaskSpec::has_task_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskSpec::set_has_task_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskSpec::clear_has_task_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskSpec::clear_task_name() {
  if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_->clear();
  }
  clear_has_task_name();
}
inline const ::std::string& TaskSpec::task_name() const {
  // @@protoc_insertion_point(field_get:fnord.dproc.TaskSpec.task_name)
  return *task_name_;
}
inline void TaskSpec::set_task_name(const ::std::string& value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
  // @@protoc_insertion_point(field_set:fnord.dproc.TaskSpec.task_name)
}
inline void TaskSpec::set_task_name(const char* value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:fnord.dproc.TaskSpec.task_name)
}
inline void TaskSpec::set_task_name(const char* value, size_t size) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fnord.dproc.TaskSpec.task_name)
}
inline ::std::string* TaskSpec::mutable_task_name() {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fnord.dproc.TaskSpec.task_name)
  return task_name_;
}
inline ::std::string* TaskSpec::release_task_name() {
  clear_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_name_;
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskSpec::set_allocated_task_name(::std::string* task_name) {
  if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_name_;
  }
  if (task_name) {
    set_has_task_name();
    task_name_ = task_name;
  } else {
    clear_has_task_name();
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fnord.dproc.TaskSpec.task_name)
}

// optional string params = 2;
inline bool TaskSpec::has_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskSpec::set_has_params() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskSpec::clear_has_params() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskSpec::clear_params() {
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_->clear();
  }
  clear_has_params();
}
inline const ::std::string& TaskSpec::params() const {
  // @@protoc_insertion_point(field_get:fnord.dproc.TaskSpec.params)
  return *params_;
}
inline void TaskSpec::set_params(const ::std::string& value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  params_->assign(value);
  // @@protoc_insertion_point(field_set:fnord.dproc.TaskSpec.params)
}
inline void TaskSpec::set_params(const char* value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  params_->assign(value);
  // @@protoc_insertion_point(field_set_char:fnord.dproc.TaskSpec.params)
}
inline void TaskSpec::set_params(const char* value, size_t size) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  params_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fnord.dproc.TaskSpec.params)
}
inline ::std::string* TaskSpec::mutable_params() {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fnord.dproc.TaskSpec.params)
  return params_;
}
inline ::std::string* TaskSpec::release_params() {
  clear_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = params_;
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskSpec::set_allocated_params(::std::string* params) {
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete params_;
  }
  if (params) {
    set_has_params();
    params_ = params;
  } else {
    clear_has_params();
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fnord.dproc.TaskSpec.params)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dproc
}  // namespace fnord

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TaskSpec_2eproto__INCLUDED
